{"version":3,"sources":["../src/prop-types.ts","../src/create-props.ts"],"sourcesContent":["import type { JSX } from \"./jsx\"\n\ntype Dict<T = any> = Record<string, T>\n\ntype DataAttr = {\n  \"data-selected\"?: any\n  \"data-expanded\"?: any\n  \"data-highlighted\"?: any\n  \"data-readonly\"?: any\n  \"data-indeterminate\"?: any\n  \"data-invalid\"?: any\n  \"data-hover\"?: any\n  \"data-active\"?: any\n  \"data-focus\"?: any\n  \"data-disabled\"?: any\n  \"data-open\"?: any\n  \"data-checked\"?: any\n  \"data-pressed\"?: any\n  \"data-complete\"?: any\n  \"data-side\"?: any\n  \"data-align\"?: any\n  \"data-empty\"?: any\n  \"data-placeholder-shown\"?: any\n  \"data-half\"?: any\n  \"data-scope\"?: string\n  \"data-uid\"?: string\n  \"data-name\"?: string\n  \"data-ownedby\"?: string\n  \"data-type\"?: string\n  \"data-valuetext\"?: string\n  \"data-placement\"?: string\n  \"data-controls\"?: string\n  \"data-part\"?: string\n  \"data-label\"?: string\n  \"data-state\"?: string | null\n  \"data-value\"?: string | number\n  \"data-orientation\"?: \"horizontal\" | \"vertical\"\n  \"data-count\"?: number\n  \"data-index\"?: number\n} & {\n  [key in `data-${string}`]?: any\n}\n\nexport type PropTypes<T = Dict> = Record<\n  | \"button\"\n  | \"label\"\n  | \"input\"\n  | \"textarea\"\n  | \"img\"\n  | \"output\"\n  | \"element\"\n  | \"select\"\n  | \"rect\"\n  | \"style\"\n  | \"circle\"\n  | \"svg\"\n  | \"path\",\n  T\n>\n\nexport type NormalizeProps<T extends PropTypes> = {\n  [K in keyof T]: (props: K extends keyof JSX.IntrinsicElements ? DataAttr & JSX.IntrinsicElements[K] : never) => T[K]\n} & {\n  element(props: DataAttr & JSX.HTMLAttributes<HTMLElement> & Record<string, any>): T[\"element\"]\n  style: JSX.CSSProperties\n}\n\nexport function createNormalizer<T extends PropTypes>(fn: (props: Dict) => Dict): NormalizeProps<T> {\n  return new Proxy({} as any, {\n    get() {\n      return fn\n    },\n  })\n}\n","type StrictKeys<K extends (keyof T)[], T> = K extends (keyof T)[]\n  ? [keyof T] extends [K[number]]\n    ? unknown\n    : `Missing required keys: ${Exclude<keyof T, K[number]>}`\n  : never\n\nexport const createProps =\n  <T extends Record<never, never>>() =>\n  <K extends (keyof T)[]>(props: K & StrictKeys<K, T>) =>\n    Array.from(new Set(props))\n"],"mappings":";AAmEO,SAAS,iBAAsC,IAA8C;AAClG,SAAO,IAAI,MAAM,CAAC,GAAU;AAAA,IAC1B,MAAM;AACJ,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AACH;;;ACnEO,IAAM,cACX,MACA,CAAwB,UACtB,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC;","names":[]}