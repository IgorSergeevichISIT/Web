import { PropTypes, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

interface PublicContext {
    /**
     * Whether the node is present (controlled by the user)
     */
    present: boolean;
    /**
     * Function called when the animation ends in the closed state
     */
    onExitComplete?(): void;
    /**
     * Whether to synchronize the present change immediately or defer it to the next frame
     */
    immediate?: boolean;
}
interface PrivateContext {
    initial: boolean;
    node: HTMLElement | null;
    styles: CSSStyleDeclaration | null;
    unmountAnimationName: string | null;
    prevAnimationName: string | null;
    rafId?: number;
}
interface UserDefinedContext extends PublicContext {
}
interface MachineContext extends PublicContext, PrivateContext {
}
interface MachineState {
    value: "mounted" | "unmountSuspended" | "unmounted";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface MachineApi {
    /**
     * Whether the animation should be skipped.
     */
    skip: boolean;
    /**
     * Whether the node is present in the DOM.
     */
    present: boolean;
    /**
     * Function to set the node (as early as possible)
     */
    setNode(node: HTMLElement | null): void;
    /**
     * Function to programmatically unmount the node
     */
    unmount(): void;
}

declare function connect<T extends PropTypes>(state: State, send: Send, _normalize: NormalizeProps<T>): MachineApi;

declare function machine(ctx: Partial<UserDefinedContext>): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: (keyof UserDefinedContext)[];

export { type MachineApi as Api, type UserDefinedContext as Context, type Service, connect, machine, props };
