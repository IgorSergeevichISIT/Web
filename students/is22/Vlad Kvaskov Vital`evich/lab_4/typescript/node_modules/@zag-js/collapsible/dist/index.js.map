{"version":3,"sources":["../src/index.ts","../src/collapsible.anatomy.ts","../src/collapsible.connect.ts","../src/collapsible.dom.ts","../src/collapsible.machine.ts","../src/collapsible.props.ts"],"sourcesContent":["export { anatomy } from \"./collapsible.anatomy\"\nexport { connect } from \"./collapsible.connect\"\nexport { machine } from \"./collapsible.machine\"\nexport * from \"./collapsible.props\"\nexport type {\n  MachineApi as Api,\n  UserDefinedContext as Context,\n  ElementIds,\n  OpenChangeDetails,\n  Service,\n} from \"./collapsible.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"collapsible\").parts(\"root\", \"trigger\", \"content\")\n\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./collapsible.anatomy\"\nimport { dom } from \"./collapsible.dom\"\nimport type { MachineApi, Send, State } from \"./collapsible.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const visible = state.matches(\"open\", \"closing\")\n  const open = state.matches(\"open\")\n\n  const height = state.context.height\n  const width = state.context.width\n  const disabled = !!state.context.disabled\n\n  const skip = !state.context.initial && open\n\n  return {\n    disabled,\n    visible,\n    open,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return\n      send(nextOpen ? \"OPEN\" : \"CLOSE\")\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-state\": open ? \"open\" : \"closed\",\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n      })\n    },\n\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        \"data-state\": skip ? undefined : open ? \"open\" : \"closed\",\n        id: dom.getContentId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        hidden: !visible,\n        style: {\n          \"--height\": height != null ? `${height}px` : undefined,\n          \"--width\": width != null ? `${width}px` : undefined,\n        },\n      })\n    },\n\n    getTriggerProps() {\n      return normalize.element({\n        ...parts.trigger.attrs,\n        id: dom.getTriggerId(state.context),\n        dir: state.context.dir,\n        type: \"button\",\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(disabled),\n        \"aria-controls\": dom.getContentId(state.context),\n        \"aria-expanded\": visible || false,\n        onClick(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n          send({ type: open ? \"CLOSE\" : \"OPEN\", src: \"trigger.click\" })\n        },\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./collapsible.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `collapsible:${ctx.id}`,\n  getContentId: (ctx: Ctx) => ctx.ids?.content ?? `collapsible:${ctx.id}:content`,\n  getTriggerId: (ctx: Ctx) => ctx.ids?.trigger ?? `collapsible:${ctx.id}:trigger`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getContentEl: (ctx: Ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getTriggerEl: (ctx: Ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),\n})\n","import { createMachine, ref } from \"@zag-js/core\"\nimport { getComputedStyle, raf } from \"@zag-js/dom-query\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./collapsible.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./collapsible.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"collapsible\",\n      initial: ctx.open ? \"open\" : \"closed\",\n\n      context: {\n        ...ctx,\n        height: 0,\n        width: 0,\n        initial: false,\n        stylesRef: null,\n        unmountAnimationName: null,\n      },\n\n      watch: {\n        open: [\"setInitial\", \"computeSize\", \"toggleVisibility\"],\n      },\n\n      exit: [\"clearInitial\"],\n\n      states: {\n        closed: {\n          tags: [\"closed\"],\n          on: {\n            \"CONTROLLED.OPEN\": \"open\",\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"],\n              },\n              {\n                target: \"open\",\n                actions: [\"setInitial\", \"computeSize\", \"invokeOnOpen\"],\n              },\n            ],\n          },\n        },\n\n        closing: {\n          tags: [\"open\"],\n          activities: [\"trackAnimationEvents\"],\n          on: {\n            \"CONTROLLED.CLOSE\": \"closed\",\n            \"CONTROLLED.OPEN\": \"open\",\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"],\n              },\n              {\n                target: \"open\",\n                actions: [\"setInitial\", \"invokeOnOpen\"],\n              },\n            ],\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnExitComplete\"],\n              },\n              {\n                target: \"closed\",\n                actions: [\"setInitial\", \"computeSize\", \"invokeOnExitComplete\"],\n              },\n            ],\n            \"ANIMATION.END\": {\n              target: \"closed\",\n              actions: [\"invokeOnExitComplete\"],\n            },\n          },\n        },\n\n        open: {\n          tags: [\"open\"],\n          on: {\n            \"CONTROLLED.CLOSE\": \"closing\",\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"closing\",\n                actions: [\"setInitial\", \"computeSize\", \"invokeOnClose\"],\n              },\n            ],\n          },\n        },\n      },\n    },\n    {\n      guards: {\n        isOpenControlled: (ctx) => !!ctx[\"open.controlled\"],\n      },\n      activities: {\n        trackAnimationEvents(ctx, _evt, { send }) {\n          let cleanup: VoidFunction | undefined\n\n          const rafCleanup = raf(() => {\n            const contentEl = dom.getContentEl(ctx)\n            if (!contentEl) return\n\n            // if there's no animation, send ANIMATION.END immediately\n            const animationName = getComputedStyle(contentEl).animationName\n            const hasNoAnimation = !animationName || animationName === \"none\"\n\n            if (hasNoAnimation) {\n              send({ type: \"ANIMATION.END\" })\n              return\n            }\n\n            const onEnd = (event: AnimationEvent) => {\n              const win = contentEl.ownerDocument.defaultView || window\n              const animationName = win.getComputedStyle(contentEl).animationName\n              if (event.target === contentEl && animationName === ctx.unmountAnimationName) {\n                send({ type: \"ANIMATION.END\" })\n              }\n            }\n\n            contentEl.addEventListener(\"animationend\", onEnd)\n            cleanup = () => {\n              contentEl.removeEventListener(\"animationend\", onEnd)\n            }\n          })\n\n          return () => {\n            rafCleanup()\n            cleanup?.()\n          }\n        },\n      },\n      actions: {\n        setInitial(ctx) {\n          ctx.initial = true\n        },\n        clearInitial(ctx) {\n          ctx.initial = false\n        },\n        computeSize(ctx, evt) {\n          ctx._rafCleanup?.()\n\n          ctx._rafCleanup = raf(() => {\n            const contentEl = dom.getContentEl(ctx)\n            if (!contentEl) return\n\n            ctx.stylesRef ||= ref({\n              animationName: contentEl.style.animationName,\n              animationDuration: contentEl.style.animationDuration,\n            })\n\n            if (evt.type === \"CLOSE\" || !ctx.open) {\n              const win = contentEl.ownerDocument.defaultView || window\n              ctx.unmountAnimationName = win.getComputedStyle(contentEl).animationName\n            }\n\n            const hidden = contentEl.hidden\n\n            // block any animations/transitions so the element renders at its full dimensions\n            contentEl.style.animationName = \"none\"\n            contentEl.style.animationDuration = \"0s\"\n            contentEl.hidden = false\n\n            const rect = contentEl.getBoundingClientRect()\n            ctx.height = rect.height\n            ctx.width = rect.width\n\n            // kick off any animations/transitions that were originally set up if it isn't the initial mount\n            if (ctx.initial) {\n              contentEl.style.animationName = ctx.stylesRef.animationName\n              contentEl.style.animationDuration = ctx.stylesRef.animationDuration\n            }\n\n            contentEl.hidden = hidden\n          })\n        },\n        invokeOnOpen: (ctx) => {\n          ctx.onOpenChange?.({ open: true })\n        },\n        invokeOnClose: (ctx) => {\n          ctx.onOpenChange?.({ open: false })\n        },\n        invokeOnExitComplete(ctx) {\n          ctx.onExitComplete?.()\n        },\n        toggleVisibility: (ctx, _evt, { send }) => {\n          send({ type: ctx.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\" })\n        },\n      },\n    },\n  )\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./collapsible.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"dir\",\n  \"disabled\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onExitComplete\",\n  \"onOpenChange\",\n  \"open.controlled\",\n  \"open\",\n])\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","names":["import_dom_query","import_dom_query","ctx","animationName","import_utils"]}