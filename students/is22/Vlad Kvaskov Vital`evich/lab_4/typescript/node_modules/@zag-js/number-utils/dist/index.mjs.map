{"version":3,"sources":["../src/number.ts","../src/number-format.ts","../src/transform.ts"],"sourcesContent":["export type Num<T extends string> = Record<T, number>\n\nexport function wrap(num: number, max: number): number {\n  return ((num % max) + max) % max\n}\n\nexport function round(num: number, t?: number) {\n  const p = 10 ** (t ?? 10)\n  num = Math.round(num * p) / p\n  return t ? num.toFixed(t) : num.toString()\n}\n\nexport function roundToDevicePixel(num: number) {\n  if (typeof window.devicePixelRatio !== \"number\") return Math.round(num)\n  const dp = window.devicePixelRatio\n  return Math.floor(num * dp + 0.5) / dp\n}\n\nexport const valueToPercent = (v: number, r: Num<\"step\" | \"min\" | \"max\">) => ((nan(v) - r.min) * 100) / (r.max - r.min)\n\nexport const percentToValue = (v: number, r: Num<\"min\" | \"max\">) => r.min + (r.max - r.min) * nan(v)\n\nexport function clamp(v: number, o: Num<\"min\" | \"max\">) {\n  return Math.min(Math.max(nan(v), o.min), o.max)\n}\n\nexport function countDecimals(value: number) {\n  if (!Number.isFinite(value)) return 0\n  let e = 1,\n    p = 0\n  while (Math.round(value * e) / e !== value) {\n    e *= 10\n    p += 1\n  }\n  return p\n}\n\nexport const increment = (v: number, s: number) => decimalOperation(nan(v), \"+\", s)\n\nexport const decrement = (v: number, s: number) => decimalOperation(nan(v), \"-\", s)\n\nexport function snapToStep(num: number, step: number) {\n  const p = countDecimals(step)\n  const v = Math.round(nan(num) / step) * step\n  return round(v, p)\n}\n\nexport function nan(v: number) {\n  return Number.isNaN(v) ? 0 : v\n}\n\nexport type FormatDecimalOptions = {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20\n   */\n  minFractionDigits?: number\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   */\n  maxFractionDigits?: number\n}\n\nexport function formatDecimal(v: number, o: Omit<FormatDecimalOptions, \"value\">) {\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: false,\n    style: \"decimal\",\n    minimumFractionDigits: o.minFractionDigits,\n    maximumFractionDigits: o.maxFractionDigits,\n  }).format(nan(v))\n}\n\nexport function isAtMax(val: number, o: Num<\"max\">) {\n  return nan(val) >= o.max\n}\n\nexport function isAtMin(val: number, o: Num<\"min\">) {\n  return nan(val) <= o.min\n}\n\nexport function isWithinRange(val: number, o: Num<\"min\" | \"max\">) {\n  return nan(val) >= o.min && nan(val) <= o.max\n}\n\nfunction decimalOperation(a: number, op: \"-\" | \"+\", b: number): number {\n  let result = op === \"+\" ? a + b : a - b\n\n  // Check if we have decimals\n  if (a % 1 !== 0 || b % 1 !== 0) {\n    const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b))\n\n    // Transform the decimals to integers based on the precision\n    a = Math.round(a * multiplier)\n    b = Math.round(b * multiplier)\n\n    // Perform the operation on integers values to make sure we don't get a fancy decimal value\n    result = op === \"+\" ? a + b : a - b\n\n    // Transform the integer result back to decimal\n    result /= multiplier\n  }\n\n  return result\n}\n","export const nf = new Intl.NumberFormat(\"en-US\", { style: \"decimal\", maximumFractionDigits: 20 })\n\nexport function formatter(n: number) {\n  return parseFloat(nf.format(n))\n}\n","import { formatter } from \"./number-format\"\n\ntype Num<T extends string> = Record<T, number>\n\nexport const transform = (a: [number, number], b: [number, number]) => {\n  const i = { min: a[0], max: a[1] }\n  const o = { min: b[0], max: b[1] }\n  return (v: number) => {\n    if (i.min === i.max || o.min === o.max) return o.min\n    const ratio = (o.max - o.min) / (i.max - i.min)\n    return o.min + ratio * (v - i.min)\n  }\n}\n\nexport function toRanges(o: Num<\"min\" | \"max\"> & { value: number[]; spacing: number }) {\n  const spacing = o.spacing ?? 0\n  return o.value.map((v, i) => {\n    const min = i === 0 ? o.min : o.value[i - 1] + spacing\n    const max = i === o.value.length - 1 ? o.max : o.value[i + 1] - spacing\n    return { min, max, value: v }\n  })\n}\n\nexport function toRangeArray(o: Num<\"min\" | \"max\" | \"step\">): number[] {\n  let i = o.min\n  const range: number[] = []\n  while (i <= o.max) {\n    range.push(i)\n    i = formatter(i + o.step)\n  }\n  return range\n}\n"],"mappings":"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","names":[]}