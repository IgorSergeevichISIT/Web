import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';
import { DataUrlType } from '@zag-js/dom-query';
import { QrCodeGenerateOptions, QrCodeGenerateResult } from 'uqr';
export { QrCodeGenerateOptions, QrCodeGenerateResult } from 'uqr';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "frame" | "pattern" | "overlay">;

type ElementIds = Partial<{
    root: string;
    frame: string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The value to encode.
     */
    value: string;
    /**
     * The element ids.
     */
    ids?: ElementIds;
    /**
     * The qr code encoding options.
     */
    encoding?: QrCodeGenerateOptions;
}
interface PrivateContext {
    /**
     * The pixel size of the qr code.
     */
    pixelSize: number;
}
type ComputedContext = Readonly<{
    encoded: QrCodeGenerateResult;
}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * The value to encode.
     */
    value: string;
    /**
     * Set the value to encode.
     */
    setValue(value: string): void;
    /**
     * Returns the data URL of the qr code.
     */
    getDataUrl(type: DataUrlType, quality?: number): Promise<string>;
    getRootProps(): T["element"];
    getFrameProps(): T["svg"];
    getPatternProps(): T["path"];
    getOverlayProps(): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("value" | "dir" | "id" | "getRootNode" | "ids" | "encoding")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "value" | "dir" | "id" | "getRootNode" | "ids" | "encoding">];

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type Service, anatomy, connect, machine, props, splitProps };
