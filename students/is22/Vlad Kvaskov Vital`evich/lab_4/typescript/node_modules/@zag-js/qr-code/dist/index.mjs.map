{"version":3,"sources":["../src/qr-code.anatomy.ts","../src/qr-code.connect.ts","../src/qr-code.dom.ts","../src/qr-code.machine.ts","../src/qr-code.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"qr-code\").parts(\"root\", \"frame\", \"pattern\", \"overlay\")\n\nexport const parts = anatomy.build()\n","import { getDataUrl } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./qr-code.anatomy\"\nimport { dom } from \"./qr-code.dom\"\nimport type { MachineApi, Send, State } from \"./qr-code.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const encoded = state.context.encoded\n  const pixelSize = state.context.pixelSize\n\n  const height = encoded.size * pixelSize\n  const width = encoded.size * pixelSize\n\n  const paths: string[] = []\n\n  for (let row = 0; row < encoded.size; row++) {\n    for (let col = 0; col < encoded.size; col++) {\n      const x = col * pixelSize\n      const y = row * pixelSize\n      if (encoded.data[row][col]) {\n        paths.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`)\n      }\n    }\n  }\n\n  return {\n    value: state.context.value,\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value })\n    },\n    getDataUrl(type, quality) {\n      const svgEl = dom.getFrameEl(state.context)\n      return getDataUrl(svgEl, { type, quality })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        style: {\n          \"--qrcode-pixel-size\": `${pixelSize}px`,\n          \"--qrcode-width\": `${width}px`,\n          \"--qrcode-height\": `${height}px`,\n          position: \"relative\",\n        },\n      })\n    },\n\n    getFrameProps() {\n      return normalize.svg({\n        id: dom.getFrameId(state.context),\n        ...parts.frame.attrs,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: `0 0 ${width} ${height}`,\n      })\n    },\n\n    getPatternProps() {\n      return normalize.path({\n        d: paths.join(\"\"),\n        ...parts.pattern.attrs,\n      })\n    },\n\n    getOverlayProps() {\n      return normalize.element({\n        ...parts.overlay.attrs,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          translate: \"-50% -50%\",\n        },\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./qr-code.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `qrcode:${ctx.id}:root`,\n  getFrameId: (ctx: Ctx) => ctx.ids?.frame ?? `qrcode:${ctx.id}:frame`,\n  getFrameEl: (ctx: Ctx) => dom.getById<SVGElement>(ctx, dom.getFrameId(ctx)),\n})\n","import { createMachine } from \"@zag-js/core\"\nimport { compact } from \"@zag-js/utils\"\nimport { memoize } from \"proxy-memoize\"\nimport { encode } from \"uqr\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./qr-code.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"qr-code\",\n      initial: \"idle\",\n      context: {\n        value: \"\",\n        ...ctx,\n        pixelSize: 10,\n      },\n\n      computed: {\n        encoded: memoize((ctx) => encode(ctx.value, ctx.encoding)),\n      },\n\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"],\n        },\n      },\n    },\n    {\n      actions: {\n        setValue: (ctx, e) => {\n          ctx.value = e.value\n        },\n      },\n    },\n  )\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./qr-code.types\"\n\nexport const props = createProps<UserDefinedContext>()([\"ids\", \"value\", \"id\", \"encoding\", \"dir\", \"getRootNode\"])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","names":["ctx"]}