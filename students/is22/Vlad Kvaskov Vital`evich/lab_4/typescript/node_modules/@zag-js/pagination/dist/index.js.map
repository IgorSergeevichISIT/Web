{"version":3,"sources":["../src/index.ts","../src/pagination.anatomy.ts","../src/pagination.connect.ts","../src/pagination.dom.ts","../src/pagination.utils.ts","../src/pagination.machine.ts","../src/pagination.props.ts"],"sourcesContent":["export { anatomy } from \"./pagination.anatomy\"\nexport { connect } from \"./pagination.connect\"\nexport { machine } from \"./pagination.machine\"\nexport * from \"./pagination.props\"\nexport type {\n  MachineApi as Api,\n  UserDefinedContext as Context,\n  ElementIds,\n  EllipsisProps,\n  IntlTranslations,\n  ItemLabelDetails,\n  ItemProps,\n  PageChangeDetails,\n  PageSizeChangeDetails,\n  Service,\n} from \"./pagination.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"pagination\").parts(\"root\", \"item\", \"ellipsis\", \"prevTrigger\", \"nextTrigger\")\n\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./pagination.anatomy\"\nimport { dom } from \"./pagination.dom\"\nimport type { MachineApi, Send, State } from \"./pagination.types\"\nimport { getTransformedRange } from \"./pagination.utils\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const totalPages = state.context.totalPages\n  const page = state.context.page\n  const translations = state.context.translations\n\n  const previousPage = state.context.previousPage\n  const nextPage = state.context.nextPage\n  const pageRange = state.context.pageRange\n\n  const type = state.context.type\n  const isButton = type === \"button\"\n\n  const isFirstPage = page === 1\n  const isLastPage = page === totalPages\n  const pages = getTransformedRange(state.context)\n\n  return {\n    page,\n    pageSize: state.context.pageSize,\n    totalPages,\n    pages,\n    previousPage,\n    nextPage,\n    pageRange,\n    slice(data) {\n      return data.slice(pageRange.start, pageRange.end)\n    },\n    setCount(count) {\n      send({ type: \"SET_COUNT\", count })\n    },\n    setPageSize(size) {\n      send({ type: \"SET_PAGE_SIZE\", size })\n    },\n    setPage(page) {\n      send({ type: \"SET_PAGE\", page })\n    },\n    goToNextPage() {\n      send({ type: \"NEXT_PAGE\" })\n    },\n    goToPrevPage() {\n      send({ type: \"PREVIOUS_PAGE\" })\n    },\n    goToFirstPage() {\n      send({ type: \"FIRST_PAGE\" })\n    },\n    goToLastPage() {\n      send({ type: \"LAST_PAGE\" })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        \"aria-label\": translations.rootLabel,\n      })\n    },\n\n    getEllipsisProps(props) {\n      return normalize.element({\n        id: dom.getEllipsisId(state.context, props.index),\n        ...parts.ellipsis.attrs,\n        dir: state.context.dir,\n      })\n    },\n\n    getItemProps(props) {\n      const index = props.value\n      const isCurrentPage = index === state.context.page\n\n      return normalize.element({\n        id: dom.getItemId(state.context, index),\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-index\": index,\n        \"data-selected\": dataAttr(isCurrentPage),\n        \"aria-current\": isCurrentPage ? \"page\" : undefined,\n        \"aria-label\": translations.itemLabel?.({ page: index, totalPages }),\n        onClick() {\n          send({ type: \"SET_PAGE\", page: index })\n        },\n        ...(isButton && { type: \"button\" }),\n      })\n    },\n\n    getPrevTriggerProps() {\n      return normalize.element({\n        id: dom.getPrevTriggerId(state.context),\n        ...parts.prevTrigger.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(isFirstPage),\n        \"aria-label\": translations.prevTriggerLabel,\n        onClick() {\n          send({ type: \"PREVIOUS_PAGE\" })\n        },\n        ...(isButton && { disabled: isFirstPage, type: \"button\" }),\n      })\n    },\n\n    getNextTriggerProps() {\n      return normalize.element({\n        id: dom.getNextTriggerId(state.context),\n        ...parts.nextTrigger.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(isLastPage),\n        \"aria-label\": translations.nextTriggerLabel,\n        onClick() {\n          send({ type: \"NEXT_PAGE\" })\n        },\n        ...(isButton && { disabled: isLastPage, type: \"button\" }),\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./pagination.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `pagination:${ctx.id}`,\n  getPrevTriggerId: (ctx: Ctx) => ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`,\n  getNextTriggerId: (ctx: Ctx) => ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`,\n  getEllipsisId: (ctx: Ctx, index: number) => ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`,\n  getItemId: (ctx: Ctx, page: number) => ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`,\n})\n","import type { MachineContext as Ctx, Pages } from \"./pagination.types\"\n\nexport const range = (start: number, end: number) => {\n  let length = end - start + 1\n  return Array.from({ length }, (_, idx) => idx + start)\n}\n\nexport const transform = (items: (string | number)[]): Pages => {\n  return items.map((value) => {\n    if (typeof value === \"number\") return { type: \"page\", value }\n    return { type: \"ellipsis\" }\n  })\n}\n\nconst ELLIPSIS = \"ellipsis\"\n\nexport type PageContext = Pick<Ctx, \"siblingCount\" | \"page\" | \"totalPages\">\n\nexport const getRange = (ctx: PageContext) => {\n  /**\n   * `2 * ctx.siblingCount + 5` explanation:\n   * 2 * ctx.siblingCount for left/right siblings\n   * 5 for 2x left/right ellipsis, 2x first/last page + 1x current page\n   *\n   * For some page counts (e.g. totalPages: 8, siblingCount: 2),\n   * calculated max page is higher than total pages,\n   * so we need to take the minimum of both.\n   */\n  const totalPageNumbers = Math.min(2 * ctx.siblingCount + 5, ctx.totalPages)\n\n  const firstPageIndex = 1\n  const lastPageIndex = ctx.totalPages\n\n  const leftSiblingIndex = Math.max(ctx.page - ctx.siblingCount, firstPageIndex)\n  const rightSiblingIndex = Math.min(ctx.page + ctx.siblingCount, lastPageIndex)\n\n  const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1\n  const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1\n\n  const itemCount = totalPageNumbers - 2 // 2 stands for one ellipsis and either first or last page\n\n  if (!showLeftEllipsis && showRightEllipsis) {\n    const leftRange = range(1, itemCount)\n    return [...leftRange, ELLIPSIS, lastPageIndex]\n  }\n\n  if (showLeftEllipsis && !showRightEllipsis) {\n    const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex)\n    return [firstPageIndex, ELLIPSIS, ...rightRange]\n  }\n\n  if (showLeftEllipsis && showRightEllipsis) {\n    const middleRange = range(leftSiblingIndex, rightSiblingIndex)\n    return [firstPageIndex, ELLIPSIS, ...middleRange, ELLIPSIS, lastPageIndex]\n  }\n\n  const fullRange = range(firstPageIndex, lastPageIndex)\n  return fullRange\n}\n\nexport const getTransformedRange = (ctx: PageContext) => transform(getRange(ctx))\n","import { createMachine } from \"@zag-js/core\"\nimport { compact, isEqual } from \"@zag-js/utils\"\nimport type { IntlTranslations, MachineContext, MachineState, UserDefinedContext } from \"./pagination.types\"\n\nconst defaultTranslations: IntlTranslations = {\n  rootLabel: \"pagination\",\n  prevTriggerLabel: \"previous page\",\n  nextTriggerLabel: \"next page\",\n  itemLabel({ page, totalPages }) {\n    const isLastPage = totalPages > 1 && page === totalPages\n    return `${isLastPage ? \"last page, \" : \"\"}page ${page}`\n  },\n}\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"pagination\",\n      initial: \"idle\",\n      context: {\n        pageSize: 10,\n        siblingCount: 1,\n        page: 1,\n        type: \"button\",\n        translations: {\n          ...defaultTranslations,\n          ...ctx.translations,\n        },\n        ...ctx,\n      },\n\n      watch: {\n        pageSize: [\"setPageIfNeeded\"],\n      },\n\n      computed: {\n        totalPages: (ctx) => Math.ceil(ctx.count / ctx.pageSize),\n        previousPage: (ctx) => (ctx.page === 1 ? null : ctx.page - 1),\n        nextPage: (ctx) => (ctx.page === ctx.totalPages ? null : ctx.page + 1),\n        pageRange: (ctx) => {\n          const start = (ctx.page - 1) * ctx.pageSize\n          const end = start + ctx.pageSize\n          return { start, end }\n        },\n        isValidPage: (ctx) => ctx.page >= 1 && ctx.page <= ctx.totalPages,\n      },\n\n      on: {\n        SET_COUNT: [\n          {\n            guard: \"isValidCount\",\n            actions: [\"setCount\", \"goToFirstPage\"],\n          },\n          {\n            actions: \"setCount\",\n          },\n        ],\n        SET_PAGE: {\n          guard: \"isValidPage\",\n          actions: \"setPage\",\n        },\n        SET_PAGE_SIZE: {\n          actions: \"setPageSize\",\n        },\n        FIRST_PAGE: {\n          actions: \"goToFirstPage\",\n        },\n        LAST_PAGE: {\n          actions: \"goToLastPage\",\n        },\n        PREVIOUS_PAGE: {\n          guard: \"canGoToPrevPage\",\n          actions: \"goToPrevPage\",\n        },\n        NEXT_PAGE: {\n          guard: \"canGoToNextPage\",\n          actions: \"goToNextPage\",\n        },\n      },\n\n      states: {\n        idle: {},\n      },\n    },\n    {\n      guards: {\n        isValidPage: (ctx, evt) => evt.page >= 1 && evt.page <= ctx.totalPages,\n        isValidCount: (ctx, evt) => ctx.page > evt.count,\n        canGoToNextPage: (ctx) => ctx.page < ctx.totalPages,\n        canGoToPrevPage: (ctx) => ctx.page > 1,\n      },\n      actions: {\n        setCount(ctx, evt) {\n          ctx.count = evt.count\n        },\n        setPage(ctx, evt) {\n          set.page(ctx, evt.page)\n        },\n        setPageSize(ctx, evt) {\n          set.pageSize(ctx, evt.size)\n        },\n        goToFirstPage(ctx) {\n          set.page(ctx, 1)\n        },\n        goToLastPage(ctx) {\n          set.page(ctx, ctx.totalPages)\n        },\n        goToPrevPage(ctx) {\n          set.page(ctx, ctx.page - 1)\n        },\n        goToNextPage(ctx) {\n          set.page(ctx, ctx.page + 1)\n        },\n        setPageIfNeeded(ctx, _evt) {\n          if (ctx.isValidPage) return\n          set.page(ctx, 1)\n        },\n      },\n    },\n  )\n}\n\nconst clampPage = (page: number, totalPages: number) => Math.min(Math.max(page, 1), totalPages)\n\nconst set = {\n  pageSize: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.pageSize, value)) return\n    ctx.pageSize = value\n    ctx.onPageSizeChange?.({ pageSize: ctx.pageSize })\n  },\n  page: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.page, value)) return\n    ctx.page = clampPage(value, ctx.totalPages)\n    ctx.onPageChange?.({ page: ctx.page, pageSize: ctx.pageSize })\n  },\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { EllipsisProps, ItemProps, UserDefinedContext } from \"./pagination.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"count\",\n  \"dir\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onPageChange\",\n  \"onPageSizeChange\",\n  \"page\",\n  \"pageSize\",\n  \"siblingCount\",\n  \"translations\",\n  \"type\",\n])\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n\nexport const itemProps = createProps<ItemProps>()([\"value\", \"type\"])\nexport const splitItemProps = createSplitProps<ItemProps>(itemProps)\n\nexport const ellipsisProps = createProps<EllipsisProps>()([\"index\"])\nexport const splitEllipsisProps = createSplitProps<EllipsisProps>(ellipsisProps)\n"],"mappings":"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","names":["import_dom_query","page","props","ctx","import_utils"]}