"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  anatomy: () => anatomy,
  connect: () => connect,
  contextProps: () => contextProps,
  indicatorProps: () => indicatorProps,
  machine: () => machine,
  props: () => props,
  splitIndicatorProps: () => splitIndicatorProps
});
module.exports = __toCommonJS(src_exports);

// src/clipboard.anatomy.ts
var import_anatomy = require("@zag-js/anatomy");
var anatomy = (0, import_anatomy.createAnatomy)("clipboard").parts("root", "control", "trigger", "indicator", "input", "label");
var parts = anatomy.build();

// src/clipboard.connect.ts
var import_dom_query2 = require("@zag-js/dom-query");

// src/clipboard.dom.ts
var import_dom_query = require("@zag-js/dom-query");
var dom = (0, import_dom_query.createScope)({
  getRootId: (ctx) => ctx.ids?.root ?? `clip:${ctx.id}`,
  getInputId: (ctx) => ctx.ids?.input ?? `clip:${ctx.id}:input`,
  getLabelId: (ctx) => ctx.ids?.label ?? `clip:${ctx.id}:label`,
  getInputEl: (ctx) => dom.getById(ctx, dom.getInputId(ctx)),
  writeToClipboard: (ctx) => copyText(dom.getDoc(ctx), ctx.value)
});
function createNode(doc, text) {
  const node = doc.createElement("pre");
  Object.assign(node.style, {
    width: "1px",
    height: "1px",
    position: "fixed",
    top: "5px"
  });
  node.textContent = text;
  return node;
}
function copyNode(node) {
  const win = (0, import_dom_query.getWindow)(node);
  const selection = win.getSelection();
  if (selection == null) {
    return Promise.reject(new Error());
  }
  selection.removeAllRanges();
  const doc = node.ownerDocument;
  const range = doc.createRange();
  range.selectNodeContents(node);
  selection.addRange(range);
  doc.execCommand("copy");
  selection.removeAllRanges();
  return Promise.resolve();
}
function copyText(doc, text) {
  const win = doc.defaultView || window;
  if (win.navigator.clipboard?.writeText !== void 0) {
    return win.navigator.clipboard.writeText(text);
  }
  if (!doc.body) {
    return Promise.reject(new Error());
  }
  const node = createNode(doc, text);
  doc.body.appendChild(node);
  copyNode(node);
  doc.body.removeChild(node);
  return Promise.resolve();
}

// src/clipboard.connect.ts
function connect(state, send, normalize) {
  const copied = state.matches("copied");
  return {
    copied,
    value: state.context.value,
    setValue(value) {
      send({ type: "VALUE.SET", value });
    },
    copy() {
      send({ type: "COPY" });
    },
    getRootProps() {
      return normalize.element({
        ...parts.root.attrs,
        "data-copied": (0, import_dom_query2.dataAttr)(copied),
        id: dom.getRootId(state.context)
      });
    },
    getLabelProps() {
      return normalize.label({
        ...parts.label.attrs,
        htmlFor: dom.getInputId(state.context),
        "data-copied": (0, import_dom_query2.dataAttr)(copied),
        id: dom.getLabelId(state.context)
      });
    },
    getControlProps() {
      return normalize.element({
        ...parts.control.attrs,
        "data-copied": (0, import_dom_query2.dataAttr)(copied)
      });
    },
    getInputProps() {
      return normalize.input({
        ...parts.input.attrs,
        defaultValue: state.context.value,
        "data-copied": (0, import_dom_query2.dataAttr)(copied),
        readOnly: true,
        "data-readonly": "true",
        id: dom.getInputId(state.context),
        onFocus(event) {
          event.currentTarget.select();
        },
        onCopy() {
          send({ type: "INPUT.COPY" });
        }
      });
    },
    getTriggerProps() {
      return normalize.button({
        ...parts.trigger.attrs,
        "aria-label": copied ? "Copied to clipboard" : "Copy to clipboard",
        "data-copied": (0, import_dom_query2.dataAttr)(copied),
        onClick() {
          send({ type: "COPY" });
        }
      });
    },
    getIndicatorProps(props2) {
      return normalize.element({
        ...parts.indicator.attrs,
        hidden: props2.copied !== copied
      });
    }
  };
}

// src/clipboard.machine.ts
var import_core = require("@zag-js/core");
var import_utils = require("@zag-js/utils");
function machine(userContext) {
  const ctx = (0, import_utils.compact)(userContext);
  return (0, import_core.createMachine)(
    {
      id: "clipboard",
      initial: "idle",
      context: {
        value: "",
        timeout: 3e3,
        ...ctx
      },
      watch: {
        value: ["syncInputElement"]
      },
      on: {
        "VALUE.SET": {
          actions: ["setValue"]
        },
        COPY: {
          target: "copied",
          actions: ["copyToClipboard", "invokeOnCopy"]
        }
      },
      states: {
        idle: {
          on: {
            "INPUT.COPY": {
              target: "copied",
              actions: ["invokeOnCopy"]
            }
          }
        },
        copied: {
          after: {
            COPY_TIMEOUT: "idle"
          },
          on: {
            COPY: {
              target: "copied",
              actions: ["copyToClipboard", "invokeOnCopy"]
            },
            "INPUT.COPY": {
              actions: ["invokeOnCopy"]
            }
          }
        }
      }
    },
    {
      actions: {
        setValue(ctx2, evt) {
          ctx2.value = evt.value;
        },
        copyToClipboard(ctx2) {
          dom.writeToClipboard(ctx2);
        },
        invokeOnCopy(ctx2) {
          ctx2.onStatusChange?.({ copied: true });
        },
        syncInputElement(ctx2) {
          dom.setValue(dom.getInputEl(ctx2), ctx2.value);
        }
      },
      delays: {
        COPY_TIMEOUT: (ctx2) => ctx2.timeout
      }
    }
  );
}

// src/clipboard.props.ts
var import_types = require("@zag-js/types");
var import_utils2 = require("@zag-js/utils");
var props = (0, import_types.createProps)()([
  "getRootNode",
  "id",
  "ids",
  "value",
  "timeout",
  "onStatusChange"
]);
var contextProps = (0, import_utils2.createSplitProps)(props);
var indicatorProps = (0, import_types.createProps)()(["copied"]);
var splitIndicatorProps = (0, import_utils2.createSplitProps)(indicatorProps);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  anatomy,
  connect,
  contextProps,
  indicatorProps,
  machine,
  props,
  splitIndicatorProps
});
//# sourceMappingURL=index.js.map