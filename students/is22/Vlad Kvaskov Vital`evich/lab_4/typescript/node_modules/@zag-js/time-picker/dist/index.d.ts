import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import { Time } from '@internationalized/date';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';
import { PositioningOptions } from '@zag-js/popper';
export { PositioningOptions } from '@zag-js/popper';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"cell" | "clearTrigger" | "column" | "content" | "control" | "input" | "label" | "positioner" | "root" | "spacer" | "trigger">;

type TimePeriod = "am" | "pm";
type TimeUnit = "hour" | "minute" | "second" | "period";
interface OpenChangeDetails {
    open: boolean;
}
interface ValueChangeDetails {
    value: Time | null;
    valueAsString: string;
}
interface FocusChangeDetails extends ValueChangeDetails {
    focusedUnit: TimeUnit;
    focusedValue: any;
}
type ElementIds = Partial<{
    trigger: string;
    input: string;
    positioner: string;
    content: string;
    clearTrigger: string;
    control: string;
    column(unit: TimeUnit): string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The locale (BCP 47 language tag) to use when formatting the time.
     */
    locale: string;
    /**
     * The selected time.
     */
    value: Time | null;
    /**
     * Whether the timepicker is open
     */
    open?: boolean;
    /**
     * Whether the timepicker open state is controlled by the user
     */
    "open.controlled"?: boolean;
    /**
     * The ids of the elements in the date picker. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The `name` attribute of the input element.
     */
    name?: string;
    /**
     * The user provided options used to position the time picker content
     */
    positioning: PositioningOptions;
    /**
     * The placeholder text of the input.
     */
    placeholder?: string;
    /**
     * Whether the time picker is disabled.
     */
    disabled?: boolean;
    /**
     * Whether the time picker is read-only.
     */
    readOnly?: boolean;
    /**
     * The minimum time that can be selected.
     */
    min?: Time;
    /**
     * The maximum time that can be selected.
     */
    max?: Time;
    /**
     * The steps of each time unit.
     */
    steps?: {
        hour?: number;
        minute?: number;
        second?: number;
    };
    /**
     * Whether to show the seconds.
     */
    allowSeconds?: boolean;
    /**
     * Function called when the value changes.
     */
    onValueChange?: (value: ValueChangeDetails) => void;
    /**
     * Function called when the time picker opens or closes.
     */
    onOpenChange?: (details: OpenChangeDetails) => void;
    /**
     * Function called when the focused date changes.
     */
    onFocusChange?: (details: FocusChangeDetails) => void;
    /**
     * Whether to disable the interaction outside logic
     */
    disableLayer?: boolean;
}
interface PrivateContext {
    /**
     * The focused unit column
     */
    focusedColumn: TimeUnit;
    /**
     * The focused cell value
     */
    focusedValue: any;
    /**
     * The current time
     */
    currentTime: Time | null;
}
type ComputedContext = Readonly<{
    /**
     * @computed
     * The selected time as a string
     */
    valueAsString: string;
    /**
     * @computed
     * Whether the time picker is in 12-hour format (based on the locale)
     */
    hour12: boolean;
    /**
     * @computed
     * The period of the time (AM/PM)
     */
    period: TimePeriod | null;
}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle" | "focused" | "open";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface ColumnProps {
    unit: TimeUnit;
}
interface CellProps {
    value: number;
}
interface PeriodCellProps {
    value: TimePeriod;
}
interface Cell {
    label: string;
    value: number;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the input is focused
     */
    focused: boolean;
    /**
     * Whether the time picker is open
     */
    open: boolean;
    /**
     * The selected time
     */
    value: Time | null;
    /**
     * The selected time as a string
     */
    valueAsString: string | undefined;
    /**
     * Whether the time picker is in 12-hour format (based on the locale prop)
     */
    hour12: boolean;
    /**
     * Function to reposition the time picker content
     */
    reposition(options?: PositioningOptions): void;
    /**
     * Function to open the time picker
     */
    setOpen(nextOpen: boolean): void;
    /**
     * Function to clear the selected time
     */
    clearValue(): void;
    /**
     * Function to set the selected time
     */
    setValue(value: string | Time): void;
    /**
     * Function to set the focused time unit
     */
    setUnitValue(unit: "period", value: TimePeriod): void;
    /**
     * Function to set the focused time unit
     */
    setUnitValue(unit: TimeUnit, value: number): void;
    /**
     * Get the available hours that will be displayed in the time picker
     */
    getHours(): Cell[];
    /**
     * Get the available minutes that will be displayed in the time picker
     */
    getMinutes(): Cell[];
    /**
     * Get the available seconds that will be displayed in the time picker
     */
    getSeconds(): Cell[];
    getRootProps(): T["element"];
    getLabelProps(): T["element"];
    getControlProps(): T["element"];
    getInputProps(): T["element"];
    getTriggerProps(): T["element"];
    getSpacerProps(): T["element"];
    getClearTriggerProps(): T["element"];
    getPositionerProps(): T["element"];
    getContentProps(): T["element"];
    getColumnProps(options: ColumnProps): T["element"];
    getHourCellProps(options: CellProps): T["element"];
    getMinuteCellProps(options: CellProps): T["element"];
    getSecondCellProps(options: CellProps): T["element"];
    getPeriodCellProps(options: PeriodCellProps): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

interface TimeSegment {
    hour: number;
    minute: number;
    second: number;
    millisecond: number;
}
declare function parse(value: Partial<TimeSegment>): Time;

declare const props: ("value" | "dir" | "id" | "getRootNode" | "name" | "open" | "disabled" | "placeholder" | "max" | "min" | "locale" | "open.controlled" | "ids" | "positioning" | "readOnly" | "steps" | "allowSeconds" | "onValueChange" | "onOpenChange" | "onFocusChange" | "disableLayer")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "value" | "dir" | "id" | "getRootNode" | "name" | "open" | "disabled" | "placeholder" | "max" | "min" | "locale" | "open.controlled" | "ids" | "positioning" | "readOnly" | "steps" | "allowSeconds" | "onValueChange" | "onOpenChange" | "onFocusChange" | "disableLayer">];

export { type MachineApi as Api, type CellProps, type ColumnProps, type UserDefinedContext as Context, type ElementIds, type FocusChangeDetails, type OpenChangeDetails, type PeriodCellProps, type Service, type TimePeriod, type TimeUnit, type ValueChangeDetails, anatomy, connect, machine, parse, props, splitProps };
