{"version":3,"sources":["../src/input-event.ts","../src/form.ts"],"sourcesContent":["interface DescriptorOptions {\n  type?: \"HTMLInputElement\" | \"HTMLTextAreaElement\" | \"HTMLSelectElement\"\n  property?: \"value\" | \"checked\"\n}\n\nconst getWindow = (el: HTMLElement) => el.ownerDocument.defaultView || window\n\nfunction getDescriptor(el: HTMLElement, options: DescriptorOptions) {\n  const { type = \"HTMLInputElement\", property = \"value\" } = options\n  const proto = getWindow(el)[type].prototype\n  return Object.getOwnPropertyDescriptor(proto, property) ?? {}\n}\n\nexport function setElementValue(el: HTMLElement, value: string, option: DescriptorOptions = {}) {\n  const descriptor = getDescriptor(el, option)\n  descriptor.set?.call(el, value)\n  el.setAttribute(\"value\", value)\n}\n\nexport function setElementChecked(el: HTMLElement, checked: boolean) {\n  const descriptor = getDescriptor(el, { type: \"HTMLInputElement\", property: \"checked\" })\n  descriptor.set?.call(el, checked)\n  // react applies the `checked` automatically when we call the descriptor\n  // but for consistency with vanilla JS, we need to do it manually as well\n  if (checked) el.setAttribute(\"checked\", \"\")\n  else el.removeAttribute(\"checked\")\n}\n\nexport type InputEventOptions = {\n  value: string | number\n  bubbles?: boolean\n}\n\nexport function dispatchInputValueEvent(el: HTMLElement | null, options: InputEventOptions) {\n  const { value, bubbles = true } = options\n\n  if (!el) return\n\n  const win = getWindow(el)\n  if (!(el instanceof win.HTMLInputElement)) return\n\n  setElementValue(el, `${value}`)\n  el.dispatchEvent(new win.Event(\"input\", { bubbles }))\n}\n\nexport type CheckedEventOptions = {\n  checked: boolean\n  bubbles?: boolean\n}\n\nexport function dispatchInputCheckedEvent(el: HTMLElement | null, options: CheckedEventOptions) {\n  const { checked, bubbles = true } = options\n\n  if (!el) return\n\n  const win = getWindow(el)\n  if (!(el instanceof win.HTMLInputElement)) return\n\n  setElementChecked(el, checked)\n  el.dispatchEvent(new win.Event(\"click\", { bubbles }))\n}\n","export function getClosestForm(el: HTMLElement) {\n  if (isFormElement(el)) return el.form\n  else return el.closest(\"form\")\n}\n\nfunction isFormElement(el: HTMLElement): el is HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement {\n  return el.matches(\"textarea, input, select, button\")\n}\n\nfunction trackFormReset(el: HTMLElement | null | undefined, callback: () => void) {\n  if (!el) return\n  const form = getClosestForm(el)\n  form?.addEventListener(\"reset\", callback, { passive: true })\n  return () => {\n    form?.removeEventListener(\"reset\", callback)\n  }\n}\n\nfunction trackFieldsetDisabled(el: HTMLElement | null | undefined, callback: (disabled: boolean) => void) {\n  const fieldset = el?.closest(\"fieldset\")\n  if (!fieldset) return\n  callback(fieldset.disabled)\n  const win = fieldset.ownerDocument.defaultView || window\n  const obs = new win.MutationObserver(() => callback(fieldset.disabled))\n  obs.observe(fieldset, {\n    attributes: true,\n    attributeFilter: [\"disabled\"],\n  })\n  return () => obs.disconnect()\n}\n\nexport function isNativeDisabled(el: HTMLElement) {\n  return el.matches(\":disabled\")\n}\n\nexport type FormControlOptions = {\n  onFieldsetDisabledChange: (disabled: boolean) => void\n  onFormReset: () => void\n}\n\nexport function trackFormControl(el: HTMLElement | null, options: FormControlOptions) {\n  if (!el) return\n\n  const { onFieldsetDisabledChange, onFormReset } = options\n\n  const cleanups = [trackFormReset(el, onFormReset), trackFieldsetDisabled(el, onFieldsetDisabledChange)]\n\n  return () => {\n    cleanups.forEach((cleanup) => cleanup?.())\n  }\n}\n"],"mappings":";AAKA,IAAM,YAAY,CAAC,OAAoB,GAAG,cAAc,eAAe;AAEvE,SAAS,cAAc,IAAiB,SAA4B;AAClE,QAAM,EAAE,OAAO,oBAAoB,WAAW,QAAQ,IAAI;AAC1D,QAAM,QAAQ,UAAU,EAAE,EAAE,IAAI,EAAE;AAClC,SAAO,OAAO,yBAAyB,OAAO,QAAQ,KAAK,CAAC;AAC9D;AAEO,SAAS,gBAAgB,IAAiB,OAAe,SAA4B,CAAC,GAAG;AAC9F,QAAM,aAAa,cAAc,IAAI,MAAM;AAC3C,aAAW,KAAK,KAAK,IAAI,KAAK;AAC9B,KAAG,aAAa,SAAS,KAAK;AAChC;AAEO,SAAS,kBAAkB,IAAiB,SAAkB;AACnE,QAAM,aAAa,cAAc,IAAI,EAAE,MAAM,oBAAoB,UAAU,UAAU,CAAC;AACtF,aAAW,KAAK,KAAK,IAAI,OAAO;AAGhC,MAAI,QAAS,IAAG,aAAa,WAAW,EAAE;AAAA,MACrC,IAAG,gBAAgB,SAAS;AACnC;AAOO,SAAS,wBAAwB,IAAwB,SAA4B;AAC1F,QAAM,EAAE,OAAO,UAAU,KAAK,IAAI;AAElC,MAAI,CAAC,GAAI;AAET,QAAM,MAAM,UAAU,EAAE;AACxB,MAAI,EAAE,cAAc,IAAI,kBAAmB;AAE3C,kBAAgB,IAAI,GAAG,KAAK,EAAE;AAC9B,KAAG,cAAc,IAAI,IAAI,MAAM,SAAS,EAAE,QAAQ,CAAC,CAAC;AACtD;AAOO,SAAS,0BAA0B,IAAwB,SAA8B;AAC9F,QAAM,EAAE,SAAS,UAAU,KAAK,IAAI;AAEpC,MAAI,CAAC,GAAI;AAET,QAAM,MAAM,UAAU,EAAE;AACxB,MAAI,EAAE,cAAc,IAAI,kBAAmB;AAE3C,oBAAkB,IAAI,OAAO;AAC7B,KAAG,cAAc,IAAI,IAAI,MAAM,SAAS,EAAE,QAAQ,CAAC,CAAC;AACtD;;;AC5DO,SAAS,eAAe,IAAiB;AAC9C,MAAI,cAAc,EAAE,EAAG,QAAO,GAAG;AAAA,MAC5B,QAAO,GAAG,QAAQ,MAAM;AAC/B;AAEA,SAAS,cAAc,IAAmF;AACxG,SAAO,GAAG,QAAQ,iCAAiC;AACrD;AAEA,SAAS,eAAe,IAAoC,UAAsB;AAChF,MAAI,CAAC,GAAI;AACT,QAAM,OAAO,eAAe,EAAE;AAC9B,QAAM,iBAAiB,SAAS,UAAU,EAAE,SAAS,KAAK,CAAC;AAC3D,SAAO,MAAM;AACX,UAAM,oBAAoB,SAAS,QAAQ;AAAA,EAC7C;AACF;AAEA,SAAS,sBAAsB,IAAoC,UAAuC;AACxG,QAAM,WAAW,IAAI,QAAQ,UAAU;AACvC,MAAI,CAAC,SAAU;AACf,WAAS,SAAS,QAAQ;AAC1B,QAAM,MAAM,SAAS,cAAc,eAAe;AAClD,QAAM,MAAM,IAAI,IAAI,iBAAiB,MAAM,SAAS,SAAS,QAAQ,CAAC;AACtE,MAAI,QAAQ,UAAU;AAAA,IACpB,YAAY;AAAA,IACZ,iBAAiB,CAAC,UAAU;AAAA,EAC9B,CAAC;AACD,SAAO,MAAM,IAAI,WAAW;AAC9B;AAEO,SAAS,iBAAiB,IAAiB;AAChD,SAAO,GAAG,QAAQ,WAAW;AAC/B;AAOO,SAAS,iBAAiB,IAAwB,SAA6B;AACpF,MAAI,CAAC,GAAI;AAET,QAAM,EAAE,0BAA0B,YAAY,IAAI;AAElD,QAAM,WAAW,CAAC,eAAe,IAAI,WAAW,GAAG,sBAAsB,IAAI,wBAAwB,CAAC;AAEtG,SAAO,MAAM;AACX,aAAS,QAAQ,CAAC,YAAY,UAAU,CAAC;AAAA,EAC3C;AACF;","names":[]}