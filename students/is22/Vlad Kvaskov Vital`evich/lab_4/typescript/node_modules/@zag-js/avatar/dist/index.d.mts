import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, CommonProperties, DirectionProperty, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "image" | "fallback">;

type LoadStatus = "error" | "loaded";
interface StatusChangeDetails {
    status: LoadStatus;
}
type ElementIds = Partial<{
    root: string;
    image: string;
    fallback: string;
}>;
interface PublicContext extends CommonProperties, DirectionProperty {
    /**
     * Functional called when the image loading status changes.
     */
    onStatusChange?: (details: StatusChangeDetails) => void;
    /**
     * The ids of the elements in the avatar. Useful for composition.
     */
    ids?: ElementIds;
}
interface PrivateContext {
}
type ComputedContext = Readonly<{}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "loading" | "error" | "loaded";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the image is loaded.
     */
    loaded: boolean;
    /**
     * Function to set new src.
     */
    setSrc(src: string): void;
    /**
     * Function to set loaded state.
     */
    setLoaded(): void;
    /**
     * Function to set error state.
     */
    setError(): void;
    getRootProps(): T["element"];
    getImageProps(): T["img"];
    getFallbackProps(): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("dir" | "id" | "getRootNode" | "onStatusChange" | "ids")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "dir" | "id" | "getRootNode" | "onStatusChange" | "ids">];

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type LoadStatus, type Service, type StatusChangeDetails, anatomy, connect, machine, props, splitProps };
