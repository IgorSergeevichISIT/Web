import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "label" | "thumb" | "valueText" | "track" | "range" | "control" | "markerGroup" | "marker">;

interface ValueChangeDetails {
    value: number[];
}
interface FocusChangeDetails {
    focusedIndex: number;
    value: number[];
}
interface ValueTextDetails {
    value: number;
    index: number;
}
type ElementIds = Partial<{
    root: string;
    thumb(index: number): string;
    hiddenInput(index: number): string;
    control: string;
    track: string;
    range: string;
    label: string;
    valueText: string;
    marker(index: number): string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the range slider. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The aria-label of each slider thumb. Useful for providing an accessible name to the slider
     */
    "aria-label"?: string[];
    /**
     * The `id` of the elements that labels each slider thumb. Useful for providing an accessible name to the slider
     */
    "aria-labelledby"?: string[];
    /**
     * The name associated with each slider thumb (when used in a form)
     */
    name?: string;
    /**
     * The associate form of the underlying input element.
     */
    form?: string;
    /**
     * The value of the range slider
     */
    value: number[];
    /**
     * Whether the slider is disabled
     */
    disabled?: boolean;
    /**
     * Whether the slider is read-only
     */
    readOnly?: boolean;
    /**
     * Whether the slider is invalid
     */
    invalid?: boolean;
    /**
     * Function invoked when the value of the slider changes
     */
    onValueChange?(details: ValueChangeDetails): void;
    /**
     * Function invoked when the slider value change is done
     */
    onValueChangeEnd?(details: ValueChangeDetails): void;
    /**
     * Function invoked when the slider's focused index changes
     */
    onFocusChange?(details: FocusChangeDetails): void;
    /**
     * Function that returns a human readable value for the slider thumb
     */
    getAriaValueText?(details: ValueTextDetails): string;
    /**
     * The minimum value of the slider
     * @default 0
     */
    min: number;
    /**
     * The maximum value of the slider
     * @default 100
     */
    max: number;
    /**
     * The step value of the slider
     * @default 1
     */
    step: number;
    /**
     * The minimum permitted steps between multiple thumbs.
     * @default 0
     */
    minStepsBetweenThumbs: number;
    /**
     * The orientation of the slider
     * @default "horizontal"
     */
    orientation: "vertical" | "horizontal";
    /**
     * The origin of the slider range
     * - "start": Useful when the value represents an absolute value
     * - "center": Useful when the value represents an offset (relative)
     *
     * @default "start"
     */
    origin?: "start" | "center";
    /**
     * The alignment of the slider thumb relative to the track
     * - `center`: the thumb will extend beyond the bounds of the slider track.
     * - `contain`: the thumb will be contained within the bounds of the track.
     *
     * @default "contain"
     */
    thumbAlignment?: "contain" | "center";
    /**
     * The slider thumbs dimensions
     */
    thumbSize: {
        width: number;
        height: number;
    } | null;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the slider thumb has been measured
     */
    hasMeasuredThumbSize: boolean;
    /**
     * @computed
     * Whether the slider is interactive
     */
    isInteractive: boolean;
    /**
     * @computed
     * Whether the slider is vertical
     */
    isVertical: boolean;
    /**
     * @computed
     * Whether the slider is horizontal
     */
    isHorizontal: boolean;
    /**
     * @computed
     * Whether the slider is in RTL mode
     */
    isRtl: boolean;
    /**
     * @computed
     * The percentage of the slider value relative to the slider min/max
     */
    valuePercent: number[];
    /**
     * @computed
     * Whether the slider is disabled
     */
    isDisabled: boolean;
}>;
interface PrivateContext {
}
interface MachineContext extends PublicContext, ComputedContext, PrivateContext {
}
interface MachineState {
    value: "idle" | "dragging" | "focus";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface MarkerProps {
    value: number;
}
interface ThumbProps {
    index: number;
    name?: string;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * The value of the slider.
     */
    value: number[];
    /**
     * Whether the slider is being dragged.
     */
    dragging: boolean;
    /**
     * Whether the slider is focused.
     */
    focused: boolean;
    /**
     * Function to set the value of the slider.
     */
    setValue(value: number[]): void;
    /**
     * Returns the value of the thumb at the given index.
     */
    getThumbValue(index: number): number;
    /**
     * Sets the value of the thumb at the given index.
     */
    setThumbValue(index: number, value: number): void;
    /**
     * Returns the percent of the thumb at the given index.
     */
    getValuePercent: (value: number) => number;
    /**
     * Returns the value of the thumb at the given percent.
     */
    getPercentValue: (percent: number) => number;
    /**
     * Returns the percent of the thumb at the given index.
     */
    getThumbPercent(index: number): number;
    /**
     * Sets the percent of the thumb at the given index.
     */
    setThumbPercent(index: number, percent: number): void;
    /**
     * Returns the min value of the thumb at the given index.
     */
    getThumbMin(index: number): number;
    /**
     * Returns the max value of the thumb at the given index.
     */
    getThumbMax(index: number): number;
    /**
     * Function to increment the value of the slider at the given index.
     */
    increment(index: number): void;
    /**
     * Function to decrement the value of the slider at the given index.
     */
    decrement(index: number): void;
    /**
     * Function to focus the slider. This focuses the first thumb.
     */
    focus(): void;
    getLabelProps(): T["label"];
    getRootProps(): T["element"];
    getValueTextProps(): T["element"];
    getTrackProps(): T["element"];
    getThumbProps(props: ThumbProps): T["element"];
    getHiddenInputProps(props: ThumbProps): T["input"];
    getRangeProps(): T["element"];
    getControlProps(): T["element"];
    getMarkerGroupProps(): T["element"];
    getMarkerProps(props: MarkerProps): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("invalid" | "form" | "value" | "dir" | "id" | "getRootNode" | "name" | "disabled" | "step" | "aria-label" | "aria-labelledby" | "max" | "min" | "origin" | "orientation" | "ids" | "readOnly" | "onValueChange" | "onValueChangeEnd" | "onFocusChange" | "getAriaValueText" | "minStepsBetweenThumbs" | "thumbAlignment" | "thumbSize")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "invalid" | "form" | "value" | "dir" | "id" | "getRootNode" | "name" | "disabled" | "step" | "aria-label" | "aria-labelledby" | "max" | "min" | "origin" | "orientation" | "ids" | "readOnly" | "onValueChange" | "onValueChangeEnd" | "onFocusChange" | "getAriaValueText" | "minStepsBetweenThumbs" | "thumbAlignment" | "thumbSize">];
declare const thumbProps: (keyof ThumbProps)[];
declare const splitThumbProps: <Props extends ThumbProps>(props: Props) => [ThumbProps, Omit<Props, keyof ThumbProps>];

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type FocusChangeDetails, type MarkerProps, type Service, type ThumbProps, type ValueChangeDetails, type ValueTextDetails, anatomy, connect, machine, props, splitProps, splitThumbProps, thumbProps };
