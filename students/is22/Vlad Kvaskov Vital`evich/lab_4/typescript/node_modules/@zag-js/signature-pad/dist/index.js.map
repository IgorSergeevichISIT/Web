{"version":3,"sources":["../src/index.ts","../src/signature-pad.anatomy.ts","../src/signature-pad.connect.ts","../src/signature-pad.dom.ts","../src/signature-pad.machine.ts","../src/get-svg-path.ts","../src/signature-pad.props.ts"],"sourcesContent":["export { anatomy } from \"./signature-pad.anatomy\"\nexport { connect } from \"./signature-pad.connect\"\nexport { machine } from \"./signature-pad.machine\"\nexport * from \"./signature-pad.props\"\nexport type {\n  MachineApi as Api,\n  UserDefinedContext as Context,\n  DataUrlType,\n  DrawDetails,\n  DrawEndDetails,\n  DrawingOptions,\n  ElementIds,\n  HiddenInputProps,\n  IntlTranslations,\n  SegmentPathProps,\n  Service,\n  StrokeOptions,\n} from \"./signature-pad.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"signature-pad\").parts(\n  \"root\",\n  \"control\",\n  \"segment\",\n  \"segmentPath\",\n  \"guide\",\n  \"clearTrigger\",\n  \"label\",\n)\n\nexport const parts = anatomy.build()\n","import { getRelativePoint, isLeftClick, isModifierKey } from \"@zag-js/dom-event\"\nimport { dataAttr, getEventTarget } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./signature-pad.anatomy\"\nimport { dom } from \"./signature-pad.dom\"\nimport type { IntlTranslations, MachineApi, Send, State } from \"./signature-pad.types\"\n\nconst defaultTranslations: IntlTranslations = {\n  control: \"signature pad\",\n  clearTrigger: \"clear signature\",\n}\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const drawing = state.matches(\"drawing\")\n  const empty = state.context.isEmpty\n  const interactive = state.context.isInteractive\n  const disabled = !!state.context.disabled\n\n  const translations = state.context.translations || defaultTranslations\n\n  return {\n    empty: empty,\n    drawing: drawing,\n    currentPath: state.context.currentPath,\n    paths: state.context.paths,\n    clear() {\n      send({ type: \"CLEAR\" })\n    },\n\n    getDataUrl(type, quality) {\n      return dom.getDataUrl(state.context, { type, quality })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (!interactive) return\n          if (event.defaultPrevented) return\n          const controlEl = dom.getControlEl(state.context)\n          controlEl?.focus({ preventScroll: true })\n        },\n      })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        id: dom.getRootId(state.context),\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        tabIndex: disabled ? undefined : 0,\n        id: dom.getControlId(state.context),\n        role: \"application\",\n        \"aria-roledescription\": \"signature pad\",\n        \"aria-label\": translations.control,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return\n          if (isModifierKey(event)) return\n          if (!interactive) return\n\n          const target = getEventTarget<HTMLElement>(event)\n          if (target?.closest(\"[data-part=clear-trigger]\")) return\n\n          event.currentTarget.setPointerCapture(event.pointerId)\n\n          const point = { x: event.clientX, y: event.clientY }\n          const { offset } = getRelativePoint(point, dom.getControlEl(state.context)!)\n          send({ type: \"POINTER_DOWN\", point: offset, pressure: event.pressure })\n        },\n        onPointerUp(event) {\n          if (!interactive) return\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId)\n          }\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\",\n        },\n      })\n    },\n\n    getSegmentProps() {\n      return normalize.svg({\n        ...parts.segment.attrs,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\",\n          fill: state.context.drawing.fill,\n        },\n      })\n    },\n\n    getSegmentPathProps(props) {\n      return normalize.path({\n        ...parts.segmentPath.attrs,\n        d: props.path,\n      })\n    },\n\n    getGuideProps() {\n      return normalize.element({\n        ...parts.guide.attrs,\n        \"data-disabled\": dataAttr(disabled),\n      })\n    },\n\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        type: \"button\",\n        \"aria-label\": translations.clearTrigger,\n        hidden: !state.context.paths.length || drawing,\n        disabled,\n        onClick() {\n          send({ type: \"CLEAR\" })\n        },\n      })\n    },\n\n    getHiddenInputProps(props) {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"text\",\n        hidden: true,\n        disabled,\n        required: state.context.required,\n        readOnly: state.context.readOnly,\n        name: state.context.name,\n        value: props.value,\n      })\n    },\n  }\n}\n","import { createScope, getDataUrl, query } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx, DataUrlOptions } from \"./signature-pad.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `signature-${ctx.id}`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `signature-control-${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `signature-label-${ctx.id}`,\n  getHiddenInputId: (ctx: Ctx) => ctx.ids?.hiddenInput ?? `signature-input-${ctx.id}`,\n\n  getControlEl: (ctx: Ctx) => dom.getById(ctx, dom.getControlId(ctx)),\n  getSegmentEl: (ctx: Ctx) => query<SVGElement>(dom.getControlEl(ctx), \"[data-part=segment]\"),\n  getHiddenInputEl: (ctx: Ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n\n  getDataUrl: (ctx: Ctx, options: DataUrlOptions): Promise<string> => {\n    if (ctx.isEmpty) return Promise.resolve(\"\")\n    return getDataUrl(dom.getSegmentEl(ctx), options)\n  },\n})\n","import { createMachine } from \"@zag-js/core\"\nimport { getRelativePoint, trackPointerMove } from \"@zag-js/dom-event\"\nimport { compact } from \"@zag-js/utils\"\nimport getStroke from \"perfect-freehand\"\nimport { getSvgPathFromStroke } from \"./get-svg-path\"\nimport { dom } from \"./signature-pad.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./signature-pad.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"signature-pad\",\n      initial: \"idle\",\n      context: {\n        readOnly: false,\n        disabled: false,\n        ...ctx,\n        paths: [],\n        currentPoints: [],\n        currentPath: null,\n        drawing: {\n          size: 2,\n          simulatePressure: false,\n          thinning: 0.7,\n          smoothing: 0.4,\n          streamline: 0.6,\n          ...ctx.drawing,\n        },\n      },\n\n      computed: {\n        isInteractive: (ctx) => !(ctx.disabled || ctx.readOnly),\n        isEmpty: (ctx) => ctx.paths.length === 0,\n      },\n\n      on: {\n        CLEAR: {\n          actions: [\"clearPoints\", \"invokeOnDrawEnd\", \"focusCanvasEl\"],\n        },\n      },\n\n      states: {\n        idle: {\n          on: {\n            POINTER_DOWN: {\n              target: \"drawing\",\n              actions: [\"addPoint\"],\n            },\n          },\n        },\n        drawing: {\n          activities: [\"trackPointerMove\"],\n          on: {\n            POINTER_MOVE: {\n              actions: [\"addPoint\", \"invokeOnDraw\"],\n            },\n            POINTER_UP: {\n              target: \"idle\",\n              actions: [\"endStroke\", \"invokeOnDrawEnd\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      activities: {\n        trackPointerMove(ctx, _evt, { send }) {\n          const doc = dom.getDoc(ctx)\n          return trackPointerMove(doc, {\n            onPointerMove({ event, point }) {\n              const { offset } = getRelativePoint(point, dom.getControlEl(ctx)!)\n              send({ type: \"POINTER_MOVE\", point: offset, pressure: event.pressure })\n            },\n            onPointerUp() {\n              send({ type: \"POINTER_UP\" })\n            },\n          })\n        },\n      },\n      actions: {\n        addPoint(ctx, evt) {\n          ctx.currentPoints.push(evt.point)\n          const stroke = getStroke(ctx.currentPoints, ctx.drawing)\n          ctx.currentPath = getSvgPathFromStroke(stroke)\n        },\n        endStroke(ctx) {\n          ctx.paths.push(ctx.currentPath!)\n          ctx.currentPoints = []\n          ctx.currentPath = null\n        },\n        clearPoints(ctx) {\n          ctx.currentPoints = []\n          ctx.paths = []\n        },\n        focusCanvasEl(ctx) {\n          queueMicrotask(() => {\n            dom.getControlEl(ctx)?.focus({ preventScroll: true })\n          })\n        },\n        invokeOnDraw(ctx) {\n          ctx.onDraw?.({\n            paths: [...ctx.paths, ctx.currentPath!],\n          })\n        },\n        invokeOnDrawEnd(ctx) {\n          ctx.onDrawEnd?.({\n            paths: [...ctx.paths],\n            getDataUrl(type, quality = 0.92) {\n              return dom.getDataUrl(ctx, { type, quality })\n            },\n          })\n        },\n      },\n    },\n  )\n}\n","const average = (a: number, b: number) => (a + b) / 2\n\nexport function getSvgPathFromStroke(points: number[][], closed = true): string {\n  const len = points.length\n\n  if (len < 4) {\n    return \"\"\n  }\n\n  let a = points[0]\n  let b = points[1]\n  const c = points[2]\n\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(2)},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(\n    b[1],\n    c[1],\n  ).toFixed(2)} T`\n\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i]\n    b = points[i + 1]\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(2)} `\n  }\n\n  if (closed) {\n    result += \"Z\"\n  }\n\n  return result\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./signature-pad.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"dir\",\n  \"disabled\",\n  \"drawing\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"name\",\n  \"onDraw\",\n  \"onDrawEnd\",\n  \"readOnly\",\n  \"required\",\n  \"translations\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","names":["import_dom_query","props","import_dom_event","ctx","getStroke","import_utils"]}