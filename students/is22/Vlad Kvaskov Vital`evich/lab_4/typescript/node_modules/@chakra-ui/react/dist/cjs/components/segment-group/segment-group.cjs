"use strict";
"use client";
'use strict';

var segmentGroup = require('@ark-ui/react/segment-group');
var createSlotRecipeContext = require('../../styled-system/create-slot-recipe-context.cjs');

const {
  withProvider,
  withContext,
  useStyles: useSegmentGroupStyles,
  PropsProvider
} = createSlotRecipeContext.createSlotRecipeContext({ key: "segmentGroup" });
const SegmentGroupRootProvider = withProvider(segmentGroup.SegmentGroup.RootProvider, "root", { forwardAsChild: true });
const SegmentGroupRoot = withProvider(segmentGroup.SegmentGroup.Root, "root", { forwardAsChild: true });
const SegmentGroupPropsProvider = PropsProvider;
const SegmentGroupItem = withContext(segmentGroup.SegmentGroup.Item, "item", { forwardAsChild: true });
const SegmentGroupItemText = withContext(segmentGroup.SegmentGroup.ItemText, "itemText", { forwardAsChild: true });
const SegmentGroupIndicator = withContext(segmentGroup.SegmentGroup.Indicator, "indicator", { forwardAsChild: true });
const SegmentGroupItemHiddenInput = segmentGroup.SegmentGroup.ItemHiddenInput;
const SegmentGroupContext = segmentGroup.SegmentGroup.Context;
const SegmentGroupItemContext = segmentGroup.SegmentGroup.ItemContext;

exports.SegmentGroupContext = SegmentGroupContext;
exports.SegmentGroupIndicator = SegmentGroupIndicator;
exports.SegmentGroupItem = SegmentGroupItem;
exports.SegmentGroupItemContext = SegmentGroupItemContext;
exports.SegmentGroupItemHiddenInput = SegmentGroupItemHiddenInput;
exports.SegmentGroupItemText = SegmentGroupItemText;
exports.SegmentGroupPropsProvider = SegmentGroupPropsProvider;
exports.SegmentGroupRoot = SegmentGroupRoot;
exports.SegmentGroupRootProvider = SegmentGroupRootProvider;
exports.useSegmentGroupStyles = useSegmentGroupStyles;
