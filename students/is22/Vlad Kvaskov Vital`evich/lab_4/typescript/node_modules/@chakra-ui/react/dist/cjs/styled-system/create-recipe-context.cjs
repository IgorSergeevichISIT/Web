"use strict";
"use client";
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var createContext = require('../create-context.cjs');
var mergeProps = require('../merge-props.cjs');
var cx = require('../utils/cx.cjs');
var empty = require('./empty.cjs');
var factory = require('./factory.cjs');
var useRecipe = require('./use-recipe.cjs');

const upperFirst = (str) => str.charAt(0).toUpperCase() + str.slice(1);
function createRecipeContext(options) {
  const { key: recipeKey, recipe: recipeConfig } = options;
  const contextName = upperFirst(
    recipeKey || recipeConfig.className || "Component"
  );
  const [PropsProvider, usePropsContext] = createContext.createContext({
    strict: false,
    name: `${contextName}PropsContext`,
    providerName: `${contextName}PropsContext`
  });
  const withContext = (Component, options2) => {
    const SuperComponent = factory.chakra(Component, {}, options2);
    const StyledComponent = React.forwardRef((inProps, ref) => {
      const props = mergeProps.mergeProps(usePropsContext(), inProps);
      const { unstyled, ...otherProps } = props;
      const fallbackRecipe = props.recipe || recipeConfig;
      const recipe = useRecipe.useRecipe({ key: recipeKey, recipe: fallbackRecipe });
      const [variantProps, localProps] = recipe.splitVariantProps(otherProps);
      const styles = unstyled ? empty.EMPTY_STYLES : recipe(variantProps);
      return /* @__PURE__ */ jsxRuntime.jsx(
        SuperComponent,
        {
          ...localProps,
          ref,
          css: [styles, props.css],
          className: cx.cx(recipe.className, props.className)
        }
      );
    });
    StyledComponent.displayName = Component.displayName || Component.name;
    return StyledComponent;
  };
  return {
    withContext,
    PropsProvider,
    usePropsContext
  };
}

exports.createRecipeContext = createRecipeContext;
