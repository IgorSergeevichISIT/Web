import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "label" | "control" | "thumb">;

interface CheckedChangeDetails {
    checked: boolean;
}
type ElementIds = Partial<{
    root: string;
    hiddenInput: string;
    control: string;
    label: string;
    thumb: string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the switch. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Specifies the localized strings that identifies the accessibility elements and their states
     */
    label: string;
    /**
     * Whether the switch is disabled.
     */
    disabled?: boolean;
    /**
     * If `true`, the switch is marked as invalid.
     */
    invalid?: boolean;
    /**
     * If `true`, the switch input is marked as required,
     */
    required?: boolean;
    /**
     * Whether the switch is read-only
     */
    readOnly?: boolean;
    /**
     * Function to call when the switch is clicked.
     */
    onCheckedChange?: (details: CheckedChangeDetails) => void;
    /**
     * Whether the switch is checked.
     */
    checked: boolean;
    /**
     * The name of the input field in a switch
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The id of the form that the switch belongs to
     */
    form?: string;
    /**
     * The value of switch input. Useful for form submission.
     * @default "on"
     */
    value?: string | number;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * Whether the switch is disabled
     */
    isDisabled: boolean;
}>;
interface PrivateContext {
}
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "ready";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the checkbox is checked
     */
    checked: boolean;
    /**
     * Whether the checkbox is disabled
     */
    disabled: boolean | undefined;
    /**
     * Whether the checkbox is focused
     */
    focused: boolean | undefined;
    /**
     * Function to set the checked state of the switch.
     */
    setChecked(checked: boolean): void;
    /**
     * Function to toggle the checked state of the checkbox
     */
    toggleChecked(): void;
    getRootProps(): T["label"];
    getLabelProps(): T["element"];
    getThumbProps(): T["element"];
    getControlProps(): T["element"];
    getHiddenInputProps(): T["input"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("label" | "form" | "value" | "dir" | "id" | "getRootNode" | "name" | "invalid" | "disabled" | "checked" | "required" | "ids" | "readOnly" | "onCheckedChange")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "label" | "form" | "value" | "dir" | "id" | "getRootNode" | "name" | "invalid" | "disabled" | "checked" | "required" | "ids" | "readOnly" | "onCheckedChange">];

export { type MachineApi as Api, type CheckedChangeDetails, type UserDefinedContext as Context, type ElementIds, type Service, anatomy, connect, machine, props, splitProps };
