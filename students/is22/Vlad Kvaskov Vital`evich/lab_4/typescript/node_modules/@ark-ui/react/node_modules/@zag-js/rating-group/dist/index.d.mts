import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "label" | "item" | "control">;

interface ValueChangeDetails {
    value: number;
}
interface HoverChangeDetails {
    hoveredValue: number;
}
interface IntlTranslations {
    ratingValueText(index: number): string;
}
type ElementIds = Partial<{
    root: string;
    label: string;
    hiddenInput: string;
    control: string;
    item(id: string): string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the rating. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Specifies the localized strings that identifies the accessibility elements and their states
     */
    translations: IntlTranslations;
    /**
     * The total number of ratings.
     * @default 5
     */
    count: number;
    /**
     * The name attribute of the rating element (used in forms).
     */
    name?: string;
    /**
     * The associate form of the underlying input element.
     */
    form?: string;
    /**
     * The current rating value.
     */
    value: number;
    /**
     * Whether the rating is readonly.
     */
    readOnly?: boolean;
    /**
     * Whether the rating is disabled.
     */
    disabled?: boolean;
    /**
     * Whether the rating is required.
     */
    required?: boolean;
    /**
     * Whether to allow half stars.
     */
    allowHalf?: boolean;
    /**
     * Whether to autofocus the rating.
     */
    autoFocus?: boolean;
    /**
     * Function to be called when the rating value changes.
     */
    onValueChange?: (details: ValueChangeDetails) => void;
    /**
     * Function to be called when the rating value is hovered.
     */
    onHoverChange?: (details: HoverChangeDetails) => void;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the rating is interactive
     */
    isInteractive: boolean;
    /**
     * @computed
     * Whether the pointer is hovering over the rating
     */
    isHovering: boolean;
    /**
     * @computed
     * Whether the rating is disabled
     */
    isDisabled: boolean;
}>;
interface PrivateContext {
}
interface MachineContext extends PublicContext, ComputedContext, PrivateContext {
}
interface MachineState {
    value: "idle" | "hover" | "focus";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface ItemProps {
    index: number;
}
interface ItemState {
    /**
     * Whether the rating item is highlighted.
     */
    highlighted: boolean;
    /**
     * Whether the rating item is partially highlighted.
     */
    half: boolean;
    /**
     * Whether the rating item is checked.
     */
    checked: boolean;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Sets the value of the rating group
     */
    setValue(value: number): void;
    /**
     * Clears the value of the rating group
     */
    clearValue(): void;
    /**
     * Whether the rating group is being hovered
     */
    hovering: boolean;
    /**
     * The current value of the rating group
     */
    value: number;
    /**
     * The value of the currently hovered rating
     */
    hoveredValue: number;
    /**
     * The total number of ratings
     */
    count: number;
    /**
     * The array of rating values. Returns an array of numbers from 1 to the max value.
     */
    items: number[];
    /**
     * Returns the state of a rating item
     */
    getItemState(props: ItemProps): ItemState;
    getRootProps(): T["element"];
    getHiddenInputProps(): T["input"];
    getLabelProps(): T["element"];
    getControlProps(): T["element"];
    getItemProps(props: ItemProps): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("form" | "value" | "dir" | "id" | "getRootNode" | "name" | "disabled" | "autoFocus" | "required" | "ids" | "translations" | "count" | "readOnly" | "allowHalf" | "onValueChange" | "onHoverChange")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "form" | "value" | "dir" | "id" | "getRootNode" | "name" | "disabled" | "autoFocus" | "required" | "ids" | "translations" | "count" | "readOnly" | "allowHalf" | "onValueChange" | "onHoverChange">];
declare const itemProps: "index"[];
declare const splitItemProps: <Props extends ItemProps>(props: Props) => [ItemProps, Omit<Props, "index">];

export { type MachineApi as Api, type UserDefinedContext as Context, type HoverChangeDetails, type IntlTranslations, type ItemProps, type ItemState, type Service, type ValueChangeDetails, anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };
