import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "item" | "itemTrigger" | "itemContent" | "itemIndicator">;

interface ValueChangeDetails {
    value: string[];
}
interface FocusChangeDetails {
    value: string | null;
}
type ElementIds = Partial<{
    root: string;
    item(value: string): string;
    itemContent(value: string): string;
    itemTrigger(value: string): string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the accordion. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Whether multple accordion items can be expanded at the same time.
     * @default false
     */
    multiple?: boolean;
    /**
     * Whether an accordion item can be closed after it has been expanded.
     * @default false
     */
    collapsible?: boolean;
    /**
     * The `value` of the accordion items that are currently being expanded.
     */
    value: string[];
    /**
     * Whether the accordion items are disabled
     */
    disabled?: boolean;
    /**
     * The callback fired when the state of expanded/collapsed accordion items changes.
     */
    onValueChange?(details: ValueChangeDetails): void;
    /**
     * The callback fired when the focused accordion item changes.
     */
    onFocusChange?(details: FocusChangeDetails): void;
    /**
     *  The orientation of the accordion items.
     *  @default "vertical"
     */
    orientation?: "horizontal" | "vertical";
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the accordion items are horizontal.
     */
    isHorizontal: boolean;
}>;
interface PrivateContext {
}
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle" | "focused";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface ItemProps {
    /**
     * The value of the accordion item.
     */
    value: string;
    /**
     * Whether the accordion item is disabled.
     */
    disabled?: boolean;
}
interface ItemState {
    /**
     * Whether the accordion item is expanded.
     */
    expanded: boolean;
    /**
     * Whether the accordion item is focused.
     */
    focused: boolean;
    /**
     * Whether the accordion item is disabled.
     */
    disabled: boolean;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * The value of the focused accordion item.
     */
    focusedValue: string | null;
    /**
     * The value of the accordion
     */
    value: string[];
    /**
     * Sets the value of the accordion.
     */
    setValue: (value: string[]) => void;
    /**
     * Gets the state of an accordion item.
     */
    getItemState(props: ItemProps): ItemState;
    getRootProps(): T["element"];
    getItemProps(props: ItemProps): T["element"];
    getItemContentProps(props: ItemProps): T["element"];
    getItemTriggerProps(props: ItemProps): T["button"];
    getItemIndicatorProps(props: ItemProps): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("value" | "dir" | "id" | "getRootNode" | "multiple" | "disabled" | "orientation" | "ids" | "collapsible" | "onValueChange" | "onFocusChange")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "value" | "dir" | "id" | "getRootNode" | "multiple" | "disabled" | "orientation" | "ids" | "collapsible" | "onValueChange" | "onFocusChange">];
declare const itemProps: (keyof ItemProps)[];
declare const splitItemProps: <Props extends ItemProps>(props: Props) => [ItemProps, Omit<Props, keyof ItemProps>];

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type FocusChangeDetails, type ItemProps, type ItemState, type Service, type ValueChangeDetails, anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };
