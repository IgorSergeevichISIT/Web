import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';
import { PositioningOptions } from '@zag-js/popper';
export { Placement, PositioningOptions } from '@zag-js/popper';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"trigger" | "arrow" | "arrowTip" | "positioner" | "content">;

interface OpenChangeDetails {
    open: boolean;
}
type ElementIds = Partial<{
    trigger: string;
    content: string;
    arrow: string;
    positioner: string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the tooltip. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The `id` of the tooltip.
     */
    id: string;
    /**
     * The open delay of the tooltip.
     * @default 1000
     */
    openDelay: number;
    /**
     * The close delay of the tooltip.
     * @default 500
     */
    closeDelay: number;
    /**
     * Whether to close the tooltip on pointerdown.
     * @default true
     */
    closeOnPointerDown: boolean;
    /**
     * Whether to close the tooltip when the Escape key is pressed.
     * @default true
     */
    closeOnEscape?: boolean;
    /**
     * Whether the tooltip should close on scroll
     * @default true
     */
    closeOnScroll?: boolean;
    /**
     * Whether the tooltip should close on click
     * @default true
     */
    closeOnClick?: boolean;
    /**
     * Whether the tooltip's content is interactive.
     * In this mode, the tooltip will remain open when user hovers over the content.
     * @see https://www.w3.org/TR/WCAG21/#content-on-hover-or-focus
     *
     * @default false
     */
    interactive: boolean;
    /**
     * Function called when the tooltip is opened.
     */
    onOpenChange?(details: OpenChangeDetails): void;
    /**
     * Custom label for the tooltip.
     */
    "aria-label"?: string;
    /**
     * The user provided options used to position the popover content
     */
    positioning: PositioningOptions;
    /**
     * Whether the tooltip is disabled
     */
    disabled?: boolean;
    /**
     * Whether the tooltip is open
     */
    open?: boolean;
    /**
     * Whether the tooltip is controlled by the user
     */
    "open.controlled"?: boolean;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed Whether an `aria-label` is set.
     */
    hasAriaLabel: boolean;
}>;
interface PrivateContext {
}
interface MachineContext extends PublicContext, ComputedContext, PrivateContext {
}
interface MachineState {
    value: "opening" | "open" | "closing" | "closed";
    tags: "open" | "closed";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the tooltip is open.
     */
    open: boolean;
    /**
     * Function to open the tooltip.
     */
    setOpen(open: boolean): void;
    /**
     * Function to reposition the popover
     */
    reposition(options?: Partial<PositioningOptions>): void;
    getTriggerProps(): T["button"];
    getArrowProps(): T["element"];
    getArrowTipProps(): T["element"];
    getPositionerProps(): T["element"];
    getContentProps(): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("dir" | "id" | "getRootNode" | "open" | "disabled" | "aria-label" | "ids" | "openDelay" | "closeDelay" | "closeOnPointerDown" | "closeOnEscape" | "closeOnScroll" | "closeOnClick" | "interactive" | "onOpenChange" | "positioning" | "open.controlled")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "dir" | "id" | "getRootNode" | "open" | "disabled" | "aria-label" | "ids" | "openDelay" | "closeDelay" | "closeOnPointerDown" | "closeOnEscape" | "closeOnScroll" | "closeOnClick" | "interactive" | "onOpenChange" | "positioning" | "open.controlled">];

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type OpenChangeDetails, type Service, anatomy, connect, machine, props, splitProps };
