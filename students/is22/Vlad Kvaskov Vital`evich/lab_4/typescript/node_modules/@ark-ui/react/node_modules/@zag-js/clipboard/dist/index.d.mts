import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "control" | "trigger" | "indicator" | "input" | "label">;

interface CopyStatusDetails {
    copied: boolean;
}
type ElementIds = Partial<{
    root: string;
    input: string;
    label: string;
}>;
interface PublicContext extends CommonProperties {
    /**
     * The ids of the elements in the clipboard. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The value to be copied to the clipboard
     */
    value: string;
    /**
     * The function to be called when the value is copied to the clipboard
     */
    onStatusChange?: (details: CopyStatusDetails) => void;
    /**
     * The timeout for the copy operation
     * @default 3000
     */
    timeout: number;
}
interface PrivateContext {
}
type ComputedContext = Readonly<{}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle" | "copied";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface IndicatorProps {
    copied: boolean;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the value has been copied to the clipboard
     */
    copied: boolean;
    /**
     * The value to be copied to the clipboard
     */
    value: string;
    /**
     * Set the value to be copied to the clipboard
     */
    setValue(value: string): void;
    /**
     * Copy the value to the clipboard
     */
    copy(): void;
    getRootProps(): T["element"];
    getLabelProps(): T["label"];
    getControlProps(): T["element"];
    getTriggerProps(): T["button"];
    getInputProps(): T["input"];
    getIndicatorProps(props: IndicatorProps): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("value" | "timeout" | "id" | "getRootNode" | "ids" | "onStatusChange")[];
declare const contextProps: <Props extends UserDefinedContext>(props: Props) => [UserDefinedContext, Omit<Props, "value" | "timeout" | "id" | "getRootNode" | "ids" | "onStatusChange">];
declare const indicatorProps: "copied"[];
declare const splitIndicatorProps: <Props extends IndicatorProps>(props: Props) => [IndicatorProps, Omit<Props, "copied">];

export { type MachineApi as Api, type UserDefinedContext as Context, type CopyStatusDetails, type ElementIds, type IndicatorProps, type Service, anatomy, connect, contextProps, indicatorProps, machine, props, splitIndicatorProps };
