'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react$1 = require('@zag-js/react');
const react = require('react');
const createSplitProps = require('../../utils/create-split-props.cjs');
const factory = require('../factory.cjs');
const useTreeViewBranchContext = require('./use-tree-view-branch-context.cjs');
const useTreeViewContext = require('./use-tree-view-context.cjs');
const useTreeViewDepthContext = require('./use-tree-view-depth-context.cjs');

const TreeViewBranch = react.forwardRef((props, ref) => {
  const [itemProps, localProps] = createSplitProps.createSplitProps()(props, ["disabled", "value"]);
  const treeView = useTreeViewContext.useTreeViewContext();
  const depth = useTreeViewDepthContext.useTreeViewDepthContext();
  const branchContext = { ...itemProps, depth };
  const mergedProps = react$1.mergeProps(treeView.getBranchProps(branchContext), localProps);
  return /* @__PURE__ */ jsxRuntime.jsx(useTreeViewDepthContext.TreeViewDepthProvider, { value: depth + 1, children: /* @__PURE__ */ jsxRuntime.jsx(useTreeViewBranchContext.TreeViewBranchProvider, { value: branchContext, children: /* @__PURE__ */ jsxRuntime.jsx(factory.ark.li, { ...mergedProps, ref }) }) });
});
TreeViewBranch.displayName = "TreeViewBranch";

exports.TreeViewBranch = TreeViewBranch;
