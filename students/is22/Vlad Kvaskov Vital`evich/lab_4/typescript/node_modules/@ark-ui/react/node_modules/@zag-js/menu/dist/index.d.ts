import { DismissableElementHandlers } from '@zag-js/dismissable';
export { FocusOutsideEvent, InteractOutsideEvent, PointerDownOutsideEvent } from '@zag-js/dismissable';
import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';
import { PositioningOptions } from '@zag-js/popper';
export { PositioningOptions } from '@zag-js/popper';
import { Point } from '@zag-js/rect-utils';
export { Point } from '@zag-js/rect-utils';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"content" | "item" | "separator" | "arrow" | "arrowTip" | "contextTrigger" | "indicator" | "itemGroup" | "itemGroupLabel" | "itemIndicator" | "itemText" | "positioner" | "trigger" | "triggerItem">;

interface OpenChangeDetails {
    /**
     * Whether the menu is open
     */
    open: boolean;
}
interface SelectionDetails {
    /**
     * The value of the selected menu item
     */
    value: string;
}
interface HighlightChangeDetails {
    /**
     * The value of the highlighted menu item
     */
    highlightedValue: string | null;
}
type ElementIds = Partial<{
    trigger: string;
    contextTrigger: string;
    content: string;
    groupLabel(id: string): string;
    group(id: string): string;
    positioner: string;
    arrow: string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties, DismissableElementHandlers {
    /**
     * The ids of the elements in the menu. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The value of the highlighted menu item.
     */
    highlightedValue: string | null;
    /**
     * Function called when the highlighted menu item changes.
     */
    onHighlightChange?: (details: HighlightChangeDetails) => void;
    /**
     * Function called when a menu item is selected.
     */
    onSelect?: (details: SelectionDetails) => void;
    /**
     * The positioning point for the menu. Can be set by the context menu trigger or the button trigger.
     */
    anchorPoint: Point | null;
    /**
     * Whether to loop the keyboard navigation.
     * @default false
     */
    loopFocus: boolean;
    /**
     * The options used to dynamically position the menu
     */
    positioning: PositioningOptions;
    /**
     * Whether to close the menu when an option is selected
     * @default true
     */
    closeOnSelect: boolean;
    /**
     * The accessibility label for the menu
     */
    "aria-label"?: string;
    /**
     * Whether the menu is open
     */
    open?: boolean;
    /**
     * Function called when the menu opens or closes
     */
    onOpenChange?: (details: OpenChangeDetails) => void;
    /**
     *  Whether the menu's open state is controlled by the user
     */
    "open.controlled"?: boolean;
    /**
     * Whether the pressing printable characters should trigger typeahead navigation
     * @default true
     */
    typeahead: boolean;
    /**
     * Whether the menu is a composed with other composite widgets like a combobox or tabs
     * @default true
     */
    composite: boolean;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the menu is a submenu (has a parent menu)
     */
    isSubmenu: boolean;
    /**
     * @computed
     * Whether the writing direction is rtl
     */
    isRtl: boolean;
    /**
     * @computed
     * Whether a typeahead search is ongoing
     */
    isTypingAhead: boolean;
}>;
interface PrivateContext {
}
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle" | "open" | "closed" | "opening" | "closing" | "opening:contextmenu";
    tags: "open" | "closed";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type Service = Machine<MachineContext, MachineState, StateMachine.AnyEventObject>;
interface Api {
    getItemProps: (opts: ItemProps) => Record<string, any>;
    getTriggerProps(): Record<string, any>;
}
interface ItemProps {
    /**
     * The unique value of the menu item option.
     */
    value: string;
    /**
     * Whether the menu item is disabled
     */
    disabled?: boolean;
    /**
     * The textual value of the option. Used in typeahead navigation of the menu.
     * If not provided, the text content of the menu item will be used.
     */
    valueText?: string;
    /**
     * Whether the menu should be closed when the option is selected.
     */
    closeOnSelect?: boolean;
}
interface OptionItemProps extends Partial<ItemProps> {
    /**
     * Whether the option is checked
     */
    checked: boolean;
    /**
     * Whether the option is a radio or a checkbox
     */
    type: "radio" | "checkbox";
    /**
     * The value of the option
     */
    value: string;
    /**
     * Function called when the option state is changed
     */
    onCheckedChange?(checked: boolean): void;
}
interface ItemState {
    /**
     * Whether the item is disabled
     */
    disabled: boolean;
    /**
     * Whether the item is highlighted
     */
    highlighted: boolean;
}
interface OptionItemState extends ItemState {
    /**
     * Whether the option item is checked
     */
    checked: boolean;
}
interface ItemGroupProps {
    /**
     * The `id` of the element that provides accessibility label to the option group
     */
    id: string;
}
interface ItemGroupLabelProps {
    /**
     * The `id` of the group this refers to
     */
    htmlFor: string;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the menu is open
     */
    open: boolean;
    /**
     * Function to open or close the menu
     */
    setOpen(open: boolean): void;
    /**
     * The id of the currently highlighted menuitem
     */
    highlightedValue: string | null;
    /**
     * Function to set the highlighted menuitem
     */
    setHighlightedValue(value: string): void;
    /**
     * Function to register a parent menu. This is used for submenus
     */
    setParent(parent: Service): void;
    /**
     * Function to register a child menu. This is used for submenus
     */
    setChild(child: Service): void;
    /**
     * Function to reposition the popover
     */
    reposition(options?: Partial<PositioningOptions>): void;
    /**
     * Returns the state of the option item
     */
    getOptionItemState(props: OptionItemProps): OptionItemState;
    /**
     * Returns the state of the menu item
     */
    getItemState(props: ItemProps): ItemState;
    getContextTriggerProps(): T["element"];
    getTriggerItemProps<A extends Api>(childApi: A): T["element"];
    getTriggerProps(): T["button"];
    getIndicatorProps(): T["element"];
    getPositionerProps(): T["element"];
    getArrowProps(): T["element"];
    getArrowTipProps(): T["element"];
    getContentProps(): T["element"];
    getSeparatorProps(): T["element"];
    getItemProps(options: ItemProps): T["element"];
    getOptionItemProps(option: OptionItemProps): T["element"];
    getItemIndicatorProps(option: OptionItemProps): T["element"];
    getItemTextProps(option: OptionItemProps): T["element"];
    getItemGroupLabelProps(options: ItemGroupLabelProps): T["element"];
    getItemGroupProps(options: ItemGroupProps): T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const props: ("dir" | "id" | "getRootNode" | "open" | "aria-label" | "onFocusOutside" | "onPointerDownOutside" | "onInteractOutside" | "onEscapeKeyDown" | "ids" | "highlightedValue" | "onHighlightChange" | "onSelect" | "anchorPoint" | "loopFocus" | "positioning" | "closeOnSelect" | "onOpenChange" | "open.controlled" | "typeahead" | "composite")[];
declare const splitProps: <Props extends Partial<UserDefinedContext>>(props: Props) => [Partial<UserDefinedContext>, Omit<Props, "dir" | "id" | "getRootNode" | "open" | "aria-label" | "onFocusOutside" | "onPointerDownOutside" | "onInteractOutside" | "onEscapeKeyDown" | "ids" | "highlightedValue" | "onHighlightChange" | "onSelect" | "anchorPoint" | "loopFocus" | "positioning" | "closeOnSelect" | "onOpenChange" | "open.controlled" | "typeahead" | "composite">];
declare const itemProps: (keyof ItemProps)[];
declare const splitItemProps: <Props extends ItemProps>(props: Props) => [ItemProps, Omit<Props, keyof ItemProps>];
declare const itemGroupLabelProps: "htmlFor"[];
declare const splitItemGroupLabelProps: <Props extends ItemGroupLabelProps>(props: Props) => [ItemGroupLabelProps, Omit<Props, "htmlFor">];
declare const itemGroupProps: "id"[];
declare const splitItemGroupProps: <Props extends ItemGroupProps>(props: Props) => [ItemGroupProps, Omit<Props, "id">];
declare const optionItemProps: (keyof OptionItemProps)[];
declare const splitOptionItemProps: <Props extends OptionItemProps>(props: Props) => [OptionItemProps, Omit<Props, keyof OptionItemProps>];

export { type MachineApi as Api, type UserDefinedContext as Context, type HighlightChangeDetails, type ItemGroupLabelProps, type ItemGroupProps, type ItemProps, type ItemState, type OpenChangeDetails, type OptionItemProps, type OptionItemState, type SelectionDetails, type Service, anatomy, connect, itemGroupLabelProps, itemGroupProps, itemProps, machine, optionItemProps, props, splitItemGroupLabelProps, splitItemGroupProps, splitItemProps, splitOptionItemProps, splitProps };
